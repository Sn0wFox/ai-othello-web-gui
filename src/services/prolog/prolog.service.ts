import * as Bluebird  from 'bluebird';

import { Injectable } from '@angular/core';
import { ajax }       from 'jquery';

import { Player }     from '../../lib/player.interface';

/**
 * The root URL from which the prolog server is accessible.
 */
const PROLOG_SERVER_ROOT: string = "http://localhost:3000";

@Injectable()
export class PrologService {

  /**
   * Returns the initial board,
   * with tokens at their starting positions.
   * /api/board/initial
   */
  public getInitialBoard(): Bluebird<number[][]> {
    return Bluebird.resolve(
      ajax({
        url: PROLOG_SERVER_ROOT + "/api/board/initial"
      }))
      .then((board) => {
        return board;
      });
  }
  
  /**
   * Returns the updated board after that the given player
   * plays the move defined by {moveX, moveY}.
   * Requirements: the move must be playable.
   * /api/board/update
   */
  public updateBoard(board: number[][], player: Player, moveX: number, moveY: number): Bluebird<number[][]> {
    let datas = {"board": JSON.stringify(board)};
    return Bluebird.resolve(
      ajax({
	      method: 'POST',
	      dataType: 'json',
        url: PROLOG_SERVER_ROOT + "/api/board/update" +
             "?player=" + player.getPieceColor() +
             "&movex=" + moveX +
             "&movey=" + moveY,
        data: datas
      }))
      .then((board) => {
        return board;
      });
  }
  
  /**
   * Returns the updated board after that the given AI
   * plays the move generated by the given AI.
   * /api/play
   */
  public updateBoardFromAIPlay(board: number[][], ai: number, player: Player): Bluebird<number[][]> {
    let datas = {"board": JSON.stringify(board)};
    return Bluebird.resolve(
      ajax({
        method: 'POST',
        dataType: 'json',
        url: PROLOG_SERVER_ROOT + "/api/play" +
             "?player=" + player.getPieceColor() +
             "&ai=" + ai,
        data: datas
      }))
      .then((board) => {
        return board;
      });
  }
  
  /**
   * Returns whether or not the given move is a valid one
   * for the given user.
   * /api/play/able
   */
  public canPlayerPlay(board: number[][], player: Player): Bluebird<boolean> {
    let datas = {"board": JSON.stringify(board)};
    return Bluebird.resolve(
      ajax({
	      method: 'POST',
	      dataType: 'json',
        url: PROLOG_SERVER_ROOT + "/api/play/able" +
             "?player=" + player.getPieceColor(),
        data: datas
      }))
      .then((res) => {
        return res.playable;
      })
	    .catch((err) => {
    	  console.log(err);
	    });
  }
  
  /**
   * Returns whether or not the given move is a valid one
   * for the given user.
   * /api/play/validate
   */
  public isValideMove(board: number[][], player: Player, moveX: number, moveY: number): Bluebird<boolean> {
    let datas = {"board": JSON.stringify(board)};
    return Bluebird.resolve(
      ajax({
	      method: 'POST',
	      dataType: 'json',
        url: PROLOG_SERVER_ROOT + "/api/play/validate" +
             "?player=" + player.getPieceColor() +
             "&movex=" + moveX +
             "&movey=" + moveY,
        data: datas
      }))
      .then((res) => {
        return res.playable;
      });
  }
}









